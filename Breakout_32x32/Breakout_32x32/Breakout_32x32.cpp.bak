// Breakout_32x32.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "Led_Matrix.h"
#include "Ball.h"
#include "Stick.h"
#include "Ball.h"
#include "Breaks.h"
#include <Windows.h>
#include <math.h>
#include <WinUser.h>
//#include <iostream>
Breaks g_Breaks;

#define PROGMEM
unsigned char g_LedStatus[50][16 * 8] PROGMEM = 
#include "Globe.h";
	
void Draw_Globe();

int _tmain(int argc, _TCHAR* argv[])
{
   HANDLE out = GetStdHandle(STD_OUTPUT_HANDLE);

    CONSOLE_CURSOR_INFO     cursorInfo;
//	Draw_Globe();
    GetConsoleCursorInfo(out, &cursorInfo);
    cursorInfo.bVisible = false; // set the cursor visibility
    SetConsoleCursorInfo(out, &cursorInfo);
//	g_Breaks.InitLevel_1();
	g_Breaks.InitLevel_1();

	LM_Clear();
	g_Breaks.MarkBreaksOnMatrix();
	LM_PC_Display();

	int i=0;
	int GGG = 0;
while(1)
{
	i=i+1;
	g_Breaks.MoveAllBalls(200);

	LM_Clear();
	g_Breaks.MarkBreaksOnMatrix();
	LM_PC_Display();
//	if ((i%20)==0)
	if (g_Breaks.m_BallCount==0)
	{
		for (int j=0; j<30; j++)
		{
			float phi = DEG2RAD(rand()%360);
			g_Breaks.AddBall (20,20, 7*cos(phi), 7*sin(phi));
		}
	}
	

	if ( GetAsyncKeyState(VK_RIGHT))
		g_Breaks.m_Stick.m_Loc_s.m_X += 1;
	if ( GetAsyncKeyState(VK_LEFT))
		g_Breaks.m_Stick.m_Loc_s.m_X -= 1;

	Sleep(GGG);
}


	return 0;
}



void Draw_Globe()
{
	int i;
	LM_Init();
	LM_PC_Display();

//	system("pause");
	Sleep(1000);
	while(1)
	for (i=0; i<50; i++)
	{
		LM_CopyImage2LedStatus(g_LedStatus[i]);
		LM_PC_Display();
		Sleep(200);
	}
}